# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: vqe-h2-example

imports:
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "master"
- name: qe-openfermion
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-openfermion.git"
    branch: "master"
- name: z-quantum-vqe
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-vqe.git"
    branch: "master"
- name: z-quantum-optimizers
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-optimizers.git"
    branch: "master"
- name: diatomic-molecule
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/tutorial-1-diatomic-molecule.git"
    branch: "master"
- name: qe-psi4
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-psi4.git"
    branch: "master"
- name: qe-forest
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-forest.git"
    branch: "master"
- name: qe-madtequila
  type: git
  parameters:
    repository: "git@github.com:AbhinavUofT/qe-madtequila.git"
    branch: "master"

steps:
- name: create-molecule
  config:
    runtime:
      language: python3
      imports: [diatomic-molecule]
      parameters:
        file: diatomic-molecule/diatomicmolecule.py
        function: create_diatomic_molecule
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - species1: "H"
      type: string
    - species2: "H"
      type: string
    - bond_length: 0.7
      type: float
  outputs:
    - name: molecule
      type: molecular-geometry
- name: create-tequila-molecule
  passed: [create-molecule]
  config:
    runtime:
      language: python3
      imports: [qe-madtequila]
      parameters:
        file: qe-madtequila/create_tequila_molecule/dict_to_molecule.py
        function: dict_to_molecule
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - molgeometry: ((create-molecule.molecule))
      type: molecular-geometry
  outputs:
    - name: geometry_str
      type: string
- name: run-madness
  passed: [create-tequila-molecule]
  config:
    runtime:
      language: python3
      customImage: "kottmanj/madness-tequila"
      imports: [qe-madtequila, z-quantum-core]
      parameters:
        file: qe-madtequila/steps/run_madtequila.py
        function: run_madness
  inputs:
    - geometry: ((create-tequila-molecule.geometry_str))
      type: string
    - n_pno: 1
      type: int
  outputs:
    - name: madmolecule
      type: madmolecule
- name: compute-pno-upccd
  passed: [run-madness]
  config:
    runtime:
      language: python3
      customImage: "kottmanj/madness-tequila"
      imports: [qe-madtequila, z-quantum-core]
      parameters:
        file: qe-madtequila/steps/run_madtequila.py
        function: compute_pno_upccd
  inputs:
     - madmolecule: ((run-madness.madmolecule))
       type: madmolecule
  outputs:
     - name: final_energy
       type: float
# there is an issue with the import of zquantum.core and using a custom image
# problems with importing ruamel from the pyquil dependenices
# we however need tequila (and therefore the custom image) since I would prefer to use the same versions
- name: convert-to-of
  passed: [run-madness]
  config:
          runtime:
                  language: python3
                  imports: [qe-madtequila, z-quantum-core]
                  parameters:
                          file: qe-madtequila/steps/run_madtequila.py
                          function: make_qubit_operator
  inputs:
          - madmolecule: ((run-madness.madmolecule))
            type: madmolecule
  outputs:
          - name: hamiltonian
            type: hamiltonian

types:
  - molecular-geometry
  - madmolecule
  - hamiltonian
